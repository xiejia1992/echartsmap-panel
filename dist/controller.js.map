{"version":3,"sources":["../src/controller.js"],"names":["MetricsPanelCtrl","_","kbn","echarts","Controller","$scope","$injector","optionDefaults","EchartsOption","IS_MAP","map","USE_URL","USE_FAKE_DATA","fakeData","url","request","updateInterval","maps","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","updateData","that","xmlhttp","data","eval","formatData","resData","res","resultData","result","i","length","push","name","metric","location","value","window","XMLHttpRequest","ActiveXObject","open","setRequestHeader","send","onreadystatechange","readyState","status","UrlData","JSON","parse","responseText","$timeout","dataList","formatDataFromPrometheus","target","match","replace","datapoints","IS_DATA_CHANGED","addEditorTab","System","import","getPanelPath","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","myChart","init","importMap","setTimeout","resize","clear","optionConfig","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"controller.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nimport echarts from './libs/echarts.min';\nimport './css/style.css!';\nimport './libs/china.js';\nimport './libs/world.js';\nimport './libs/dark.js';\n\nexport class Controller extends MetricsPanelCtrl {\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n       // 定义默认配置项\n        const optionDefaults = {\n            EchartsOption: 'console.log(JSON.stringify(echartsData));\\n\\noption = {};',\n            IS_MAP: false,\n            map: 'china',\n            USE_URL: false,\n            USE_FAKE_DATA: false,\n            fakeData: '',\n            url: '',\n            request: '',\n            updateInterval: 60000\n        };\n\t\t\n\t\tthis.maps = ['中国', '世界'];\n        _.defaults(this.panel, optionDefaults);\n\n        \n\t\t//绑定grafana事件\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on('panel-initialized', this.render.bind(this));\n\n        this.updateData()\n    }\n\n\n    // GET请求\n    updateData() {\n        const that = this;\n        let xmlhttp;\n\n        if (this.panel.USE_URL && this.panel.USE_FAKE_DATA && this.panel.fakeData) {\n            //判断使用假数据条件\n            this.data = eval(this.panel.fakeData);\n        } else if (that.panel.USE_URL && !that.panel.USE_FAKE_DATA && that.panel.url && that.panel.request) {\n            //判断使用api接口条件,如果满足创建xmlhttp\n            if (window.XMLHttpRequest) {\n                xmlhttp = new XMLHttpRequest();\n            } else {\n                xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');\n            }\n\n            xmlhttp.open(that.panel.request, that.panel.url, true);\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;\");\n            xmlhttp.send(null);\n\n            //格式化http请求返回的数据\n            function formatData(resData) {\n                let res = [];\n                let resultData = resData.data.result;\n                for (var i = 0; i < resultData.length; i++) {\n                        res.push({\n                            name: resultData[i].metric.location,\n                            value: resultData[i].value[1]\n                        });\n                }\n                return res;\n            }\n\n            //处理返回的数据并渲染到页面\n            xmlhttp.onreadystatechange = () => {\n                if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\n                    that.UrlData = JSON.parse(xmlhttp.responseText);\n                    this.data = formatData(that.UrlData);\n                    that.onDataReceived();\n                }\n            }\n\n        } else {\n            xmlhttp = null;\n        }\n        this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\n    }\n\t\n\n\t//根据data数据渲染页面函数\n    onDataReceived(dataList) {\n        if (!this.panel.USE_URL && !this.panel.USE_FAKE_DATA) {\n            function formatDataFromPrometheus(data){\n                var res = [];\n                for (var i = 0; i < data.length; i++) {\n                    res.push({\n                        name: data[i].target.match(/(location=\")([^\\\"])*/g)[0].replace('location=\"',''),\n                        value: data[i].datapoints[data[i].datapoints.length - 1][0]\n                    });\n                }\n                return res;\n            }\n            this.data = formatDataFromPrometheus(dataList);\n            this.IS_DATA_CHANGED = true;\n            this.render(this.data);\n            this.IS_DATA_CHANGED = false;\n        } else {\n            this.data = !this.panel.USE_URL && !this.panel.USE_FAKE_DATA ? dataList : this.data;\n            this.IS_DATA_CHANGED = true;\n            this.render(this.data);\n            this.IS_DATA_CHANGED = false;\n        }\n    }\n\n    onDataError() {\n        this.render(this.data);\n    }\n\n\n    onInitEditMode() {\n        this.addEditorTab('Data', 'public/plugins/echartsmap-panel/partials/module-editor.html', 2);\n        this.addEditorTab('EcahrtsConfig', 'public/plugins/echartsmap-panel/partials/echarts-editor.html', 3);\n    }\n\n\n    importMap() {\n        if (!this.panel.IS_MAP) return;\n        switch (this.panel.map) {\n            case '中国':\n                System.import(this.getPanelPath() + 'libs/china.js');\n                break;\n            case '世界':\n                System.import(this.getPanelPath() + 'libs/world.js');\n                break;\n            default:\n                break;\n        }\n    }\n\n    getPanelPath() {\n        return `../${grafanaBootData.settings.panels[this.pluginId].baseUrl}/`;\n    }\n\n\n    link(scope, elem, attrs, ctrl) {\n        const $panelContainer = elem.find('.echarts_container')[0];\n        let option = {};\n        let echartsData = [];\n\n        ctrl.IS_DATA_CHANGED = true;\n        const myChart = echarts.init($panelContainer, 'dark');\n\n        ctrl.importMap();\n        setTimeout(() => {\n            myChart.resize();\n        }, 60000);\n\n        function render(data) {\n            if (!myChart) {\n                return;\n            }\n\n            if (ctrl.IS_DATA_CHANGED) {\n                myChart.clear();\n                //echart加载option配置\n                echartsData = ctrl.data;\n                eval(ctrl.panel.EchartsOption);\n                var optionConfig = option;\n                myChart.setOption(optionConfig);\n            }\n            myChart.resize();\n        }\n\n        this.events.on('render', (data) => {\n            render(data);\n            ctrl.renderingCompleted();\n        });\n    }\n}\n\nController.templateUrl = 'partials/module.html';\n"]}